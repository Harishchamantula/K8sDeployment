# Default values for ivivav4chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

############ Below are settings related to iviva services###############
iviva:
  FWid: "8b331692\\\\" ###### FW id from Eutech
  appsid: "4d54331d" ####### apps id from Eutech
  uxpid: "latest"  ###### uxp id from Eutech
  sqluid: "sa"  ###### sql server username
  sqlpwd: "Welcome@123" ###### sql server password
  sqlserver: "192.16.29.5" ###### sql server IP
  influxdb: "10.0.0.194" ###### influxdb IP
  webpodscount: "1"  ###### Number of Web Pods
  emailgatewaypodscount: "1" ###### Number of Email GW Pods
  sdmpodscount: "1" ###### Number of sdm pods
  smsgatewaypodscount: "1"   ###### Number of SMS GW Pods
  sdtaskrunnerpodscount: "1"  ###### Number of sdtaskrunner Pods
  wfenginepodscount: "1"  ###### Number of WF Engine Pods
  hydrapodscount: "1" ###### Number of Hydra Pods
  hermespodscount: "1"  ###### Number of Hermes Pods
  jobrunnerpodscount: "1" ###### Number of Jobrunner Pods
  accounturl: "https://{account}.raseel.city" ######### Enter the account url here ex: https://{account}.raseel.city
  basedomain: "raseel.city" ######### Enter the base domain here ex: raseel.city   
  canconfigurethreadpool: "1"
  minworkerthreads: "5000"
  logindetailscacheenabled: "1"
  logindetailscachetimeseconds: "43200" # 12 hrs
  lucyengineclustered: "0"
emailgateway:
  fromemailaddress: "contact@postal.raseel.city" ####### Enter the sender email address i.e account from which you want to send email to others
  host: "postal.raseel.city" ##### Enter the SMTP host name ex:smtp.gmail.com
  port: "2525" ##### Enter the SMTP host port number ex: 587
  user: "contact@postal.raseel.city" ##### Enter the account name through which the SMTP host will be accessed
  password: "NNeTIwPPUYo7Y3M2Od9HeiM5" ##### Enter the password for the above mentioned account name
processengine:
  clustered: "" ## Enable or disable clustering ex: 1 or 0
  debugstatus: "" ## Enable or disable clustering ex: 1 or 0
  groups: "" ## Enter the groupname here ex: A
  sleeptime: "" ## Enter the sleeptime in ms ex: 1000
  threads: "" ### Enter the number of threads for processengine to use ex: 1
############### Hydra port Range ###########
hydra:
  min_port: "7000" ###### Starting port
  max_port: "7100" ##### Ending Port
############## Database names that will be created in the sql server ##############
dbnames:
  aspdbname: "asp19"
  jobqueuedbname: "jobqueue19"
  messagingdbname: "messaging19"
  lucyeventdbname: "LucyEventDB19"  
  groupdbname: "process19"
################## Domain name through which the site will be accessed#########
ivivaingress:
  domainname: "*.raseel.city"
  lucydomain: "devportal.raseel.city"
############ Deployment rollout settings###############
deployment:
  type: RollingUpdate
  maxSurge: 25%
  maxUnavailable: 25%
############CPU and MEM for all iviva services ###########
cpurequests:
  ivivaweb: 50m
  lucyengineprimary: 50m
  emailgateway: 50m
  hermes: 50m
  hydra: 50m
  ingress: 50m
  jobrunner: 50m
  mongodb: 50m
  redis: 50m
  sdm: 50m
  sdtaskrunner: 50m
  smsgateway: 50m
  wfengine: 50m
  rabbitmq: 50m
cpulimits:
  ivivaweb: 1000m
  lucyengineprimary: 1000m
  emailgateway: 500m
  hermes: 500m
  hydra: 2000m  
  ingress: 2000m
  jobrunner: 500m
  mongodb: 500m
  redis: 500m
  sdm: 2000m
  sdtaskrunner: 500m
  smsgateway: 500m
  wfengine: 500m
  rabbitmq: 500m
memrequests:
  ivivaweb: 512Mi
  lucyengineprimary: 512Mi
  emailgateway: 128Mi
  hermes: 128Mi
  hydra: 128Mi  
  ingress: 128Mi
  jobrunner: 128Mi
  mongodb: 128Mi
  redis: 128Mi
  sdm: 128Mi
  sdtaskrunner: 128Mi
  smsgateway: 128Mi
  wfengine: 128Mi
  rabbitmq: 128Mi
memlimits:
  ivivaweb: 4096Mi
  lucyengineprimary: 4096Mi
  emailgateway: 512Mi
  hermes: 512Mi
  hydra: 512Mi  
  ingress: 512Mi
  jobrunner: 512Mi
  mongodb: 512Mi
  redis: 512Mi
  sdm: 512Mi
  sdtaskrunner: 512Mi
  smsgateway: 512Mi
  wfengine: 512Mi
  rabbitmq: 512Mi
########### Autoscaling################
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 85
  targetMemoryUtilizationPercentage: 90
############### Cert manager###############

cert-manager: #defined by either the name or alias of your dependency in Chart.yaml
  #namespace: security
  enabled: True
ingress: 
  #namespace: ingress-nginx
  enabled: True

####################### Cert values taken after converting to base64 - for ingress cert mapping############# 
certsecrets:
  tlscrtbase64: ""
  tlskeybase64: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRRENOM2ozYmsyTjRnTnYKVUh1ODNnajc4TzBhSWlnODRaUzlxdjZvQmFBcHgrRmhjR3hJWlgrb1BSdTdGWHpwd1VDN2FPNVp3TFVxVFNmcgpoU0FMb05UdEZRbHZTR2JDSVFVanN3YnVYdmkwSWVwNUFkemxIUlJiVnRaTTh0YXFUT2hsVXJKSHB3bHBxdW9sCmcrazE2bVM0OWM4M085d2JXbHBDSmIyNStnMnBaMFp6aUVWZ2hEc2tuZVYwN1NINUJsOWE4d3NiTFpMNnNDNkwKa2F1dFFPMStWVDhZeTRoYW1WREI2Y3M0dHFvVmU2RjJtaXgvT09hdmRsNmFDR3ZjV2tlU0NjcmlMU1NOUVlxOQpDbXZtOTRwMC9JS1V0V3krVmFtTkptQzJXZzlkUEEvT3AzanBlMzVUMVhGcFBwTXJsT2E1S2MzRjlpeEJzdFVnCkU3S3YrRzZkQWdNQkFBRUNnZ0VBZnNEZGZmN0xOdEpQRTVNZmJzQXFkT05rbXkyM3ZTUXNneXphVHFaOVJVZGkKWE1tV29oazhHM3ptWUU5QjJ2MTVWZGJCMkduZzB0N1FNdklMWEF0M2E5UFMrSUgwTHJhR09DcGJWNjg3K2JRNAo1d2pFTmZPb21ZUXZFTUZjUUlFNUd3ZkJ1dW5WUnRWNVEwcTRKYXY0V0k1MDBzT0tmMytVY0o5WkY4dU9wd1BRCnJ2WmNFcHpqcnlnZ1JHZ0k2NGhkQmdBZFAyWGszdGFiQ3RpL056OHB2aHN3aXhLd3lDMHhPdmw1THhJQ0pxTGMKVXZWK2RqQWJMQnpjajJqYmlxRzZ3dDhlVWZtNWZxV1FYUDVoaXhNN1BoQUJnYTVHYjJVTmZkbndqbm5IMzhzdApHSW85ckxiTnhyeUhnRU15WHc5cnYrRjVkVGtKUkwrWDdQN3B2OHF3TVFLQmdRRFZmcXZ0bHc4MWFXWUdZZGlLCmZVaDRyeDhsWVZzSURxYS9VUEk1ZUVrVVB2UDhZY1VjcUNudnE3V2NmRUxucWxxWWNsYVNJb1M2VnhIcnQwZWoKVUNZTzR6Wk5YQTFxbjQ4T3dEUXR4QXZTSmF3NkovcjZzZ3IrUEh5TXhKWVpOajVMaXcwRlhvaXdTelV0NXYxbwpaa1l0U0NNRmI4eVdVTFk2eVV6SUEzS1Z5d0tCZ1FEbzRqMk1lWnZFMmVsZlpRRWVyaUUwWG9RSStFUHk5dnNoCmFaSjdWQk83M1UvN3ZaYm5wVlBjM0RQckUyOHQ3dVRJUHVKckdzMlhIdEIzVUMyc1FLbXc2UlpIUGswTXNLRXUKVlA2cDZOd0dXWEh5Um5qWXhMWWljNWk0UGdiMVFjK09MdXdmMmdXNkowM3hCeFloS0N3MWI0TEoxQ1lBN0N0aApIZUJmbGNiQU53S0JnRkFKV2ZrTExZZHZpUEVSazNWdnZGQ0tEbG9jSWwxbDZMdEdaRmlKTUpSbmVWNS9aTDcyCmlDb3lyRFlMRzZYdjVtREtWSXdhWnJuWTFINFN5c2Q5ejVhN05XdFEvREtodUtibUJXbTIybHVoQmUwVGVmS3IKOXBVVEpmbzc1SzEwK1d1bXFHMy8zNngvdFdNTStxazkxa2M1aU8rTDF4M3ZDaklGcjBRNGpxZDdBb0dBRExiZApXV0FDU3hzQ2pMeTg5T25ZMGowZXhFYVpueGd3MmNBanlTdnI3K1BEVENFcnJmWHV3QzRkZjRZT0dkbmpEN092Ck5OMi92N0prK3o2Ylg3NGdCWktVTHN1TjlWVm5WMW80bFJvcmVRVkZIVThQcGZZSFk1WWdEbDhFamp0TGs1Mm8KTW96NnB4RWlSamgyMHRTWXBVb3pQOFdmVlltUFRMd08xZWtkY3IwQ2dZQUpRaUlnWUJ1ZCtXMXIyWURWMVAwYgpsZXd4MytKVnRtYklSTi9PcDJBVHRGUVIxNE93T082bjVsMGs4RXp0L3RFOS9iQWdGd1gwdVJUazlLM1pvcm1aCjdUbjh0QmxkQThjTCtoTDZLcURqNzE0L00rMUl4RWQ5WkliV3o0NGJsR0ZhYnhYR1YrM2d4aFNaT09vbjRSNmsKTEZ6dkdTVkk1bGlRSjlrOW5Sa3J3Zz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="



#### Keycloak settings#####
# ClientID, ClientSecret and Authority have to come from the Keycloak realm that was configured
# ResponseType will usually be 'code'
# An example of the Authority entry: https://auth.mdadev.iviva.cloud/realms/lucy
# (Basically the realm url)
# Others can be usually kept blank
keycloak:
  ClientID: "iviva"
  ClientSecret: "rhGtxYWzXdTPBzXpADDdfnobYWx4gMvU"
  Authority: "https://deviam.raseel.city/realms/raseel"
  ResponseType: "code"
  Nonce:
  NonceCookie:
########## Mongodb Settings #########
mongodb:
  username: "ivivaroot" ###USername you have chosen while installing mongodb 
  password: "hlbB8CzT"  ### Password that you got from the mongodb secret
  replicaseturl: "mongo-mongodb-0.mongo-mongodb-headless.iviva.svc.cluster.local:27017,mongo-mongodb-1.mongo-mongodb-headless.iviva.svc.cluster.local:27017" #### Comma separated hosts that you get from the output of mongodb installation, this will vary with number of replicas that you want
  replicasetname: "rs0" #### replica set name that you gave while installing mongodb, better to leave this rs0 even there and also here
  
